<?xml version="1.0"?>
<configuration>
  <!--
  Windsor容器中的对象其生命周期有以下几种方式：
  Singleton: 单例模式
  Transient: 临时对象模式，每次都创建一个新对象返回给请求者
  PerThread: 在当前执行线程上为单例模式
  Pooled: 用一个对象池管理请求对象，从对象池中返回对象实例
  Custom: 实现Castle.MicroKernel.Lifestyle.ILifestyleManager或从Castle.MicroKernel.Lifestyle.AbstractLifestyleManager继承，实现自定义的对象生命周期管理
  -->

  <!-- IOC依赖注入容器 -->
  <components>
    <!--案例-->
    <component id="IUserSvc" service="Sample.IUserSvc,Sample" type="Sample.UserSvc,Sample" >
    </component>
  </components>

</configuration>


